New in version 0.57
===================
* support use of MINC_TOOLKIT environment variable to indicate libminc2.so location
  (removing need to set LD_LIBRARY_PATH or similar)
* improve README

New in version 0.56
===================
* revert a commit (#31) causing incorrect scaling of label files
* general code cleanup
* add Github actions:
  * test on pull/pr to main/develop
  * publish to PyPI on release
* drop support for unmaintained Python versions (3.5 and 3.6)

New in version 0.55
===================
* mincVolume.writeFile: don't choke on some numpy dtypes
* remove obsolete `weave` code from pyminc_test2.py

New in version 0.54.0
=====================
* support non-C-contiguous ndarrays (#37)
* fix a bug where a volume only written via hyperslab API would be deleted on `closeVolume` (#32)
* remove old conditional code to support Python 2 (not supported since 0.53)
* substantial cleanup of the tests; new tests for non-contiguous arrays
* various minor code improvements

New in version 0.53.3
=====================
* bugfix where valid range would be set incorrectly for label files (pyminc/pull/31)

New in version 0.53.2
=====================
* solve some test flakiness by using a more appropriate assert (pyminc/issues/34)
  - the exact mechanism causing the original flakiness is still unknown

New in version 0.53.1
=====================
* don't install `test/` dir into site-packages directory

New in version 0.53
===================
* drop support for Python 2 and Python3 < 3.5
* don't create a 'test' package in site-packages/

New in version 0.52
===================
* added functionality for accessing linear transform component of a general transform,
  and associated small bugfixes (added by John Sled)
* fix some failing/broken tests
* one instance of indexing numpy array with a list was changed to use a tuple due to numpy API
  deprecation (see e.g. MICe-lab/#18)

New in version 0.51
===================
* turns out that for memory/time efficiency, you really want to load a transformation grid into memory
  only once and apply it to as many coordinates as you can. So added the ability to do just that:
  transform_multiple_xyz_coordinates_using_xfm() accepts arrays of x,y,z coordinates

New in version 0.50
===================
* added support for transforming x,y,z coordinates using an xfm file: transform_xyz_coordinates_using_xfm()

New in version 0.49
===================
* bug fix related to dtype="float". The data of the pyminc object was cast to be "float64" which is 
  double. 

New in version 0.48
===================
* changes to the calls to miset_attribute and miset_attr_values in order to properly set the image:complete flag
* some fixes to the tests in order to avoid warning messages

New in version 0.47
===================
* the dtype for a volume created by volumeFromData is based on the data block provided, but can be overwritten using the dtype argument
* fixed the history entry: ends with a newline, which means that subsequent entries in the history are properly separated
* label files are not read in as double by default anymore, but as one of the unsigned integer types. 

New in version 0.46
===================
* when using volumeFromDescription and volumeFromData, these numpy types are now properly supported:
numpy.int8, numpy.int16, numpy.int32, numpy.float32, numpy.float64, numpy.uint8, numpy.uint16, numpy.uint32
numpy.dtype("int8"), numpy.dtype("int16"), numpy.dtype("int32"), numpy.dtype("float32"), numpy.dtype("float64"),
numpy.dtype("uint8"), numpy.dtype("uint16"), numpy.dtype("uint32")
* changed the "from numpy import *" to "import numpy as numpy" to avoid possible name space clashes

New in version 0.45
===================
* when MINC volumes are read, their volume type on disk is determined (byte, unsigned short, float etc.) and preserved. The data type of the MINC representation in Python (numpy) is double by default to maintain presicion. You do have full control over what you want the volume type on disk to be for your MINC volumes in Python.
* code is now Python3 compatible
* you can now specify direction cosines when creating volumes using volumeFromDescription and volumeFromData
* default volume type for volumeLikeFile changed from ubyte to None; will be determined by the like file.
* default volume type for volumeFromDescription changed from ubyte to ushort.
* default volume type for volumeFromData changed from ubyte to ushort.
* the image:complete attribute is set upon successfully writing out the data (used by minccomplete)
* files that are not properly/fully written to disk are deleted when closeVolume() or the destructor is called (so no broken files are left behind)
* fixed getVolumeRange(), now returns the correct data limits
* added more tests (python setup.py test)

New in Version 0.4
==================
* fixed bug, such that float and double MINC files can be written to disk

